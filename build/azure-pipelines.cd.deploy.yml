parameters:
  name: ''
  vmImage: ''
  configuration: ''

steps:
- template: azure-pipelines.core.init-dotnet-tools.yml

- task: Docker@2
  inputs:
    command: login
    containerRegistry: $(docker-registry-service-connection)
  displayName: Init - Docker - Login
  condition: and(succeeded(), ne(variables['docker-registry-service-connection'], ''))

- task: DownloadPipelineArtifact@0
  displayName: Restore - Artifacts
  inputs:
    artifactName: ci-build-${{ parameters.configuration }}
    targetPath: $(Build.ArtifactStagingDirectory)

- script: |
    export PATH="$PATH:~/.dotnet/tools"
    dotnet cake deploy.cake --configuration=${{ parameters.configuration }} --target=publish --artifacts-directory=$(Build.ArtifactStagingDirectory) --package-registry=$(docker-registry-server)/
  displayName: Build - Publish

- script: |
    export PATH="$PATH:~/.dotnet/tools"
    dotnet cake deploy.cake --target=clean --configuration=${{ parameters.configuration }} --artifacts-directory=$(Build.ArtifactStagingDirectory) --package-registry=$(docker-registry-server)/
  displayName: Clean - Build
  condition: always()

- task: Docker@2
  inputs:
    command: logout
    containerRegistry: $(docker-registry-service-connection)
  displayName: Clean - Docker - Logout
  condition: ne(variables['docker-registry-service-connection'], '')
