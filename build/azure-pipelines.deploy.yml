parameters:
  name: ''
  vmImage: ''
  configuration: ''
  dockerRegistryServiceConnection: ''


jobs:
  - job: deploy${{ parameters.name }}
    displayName: Deploy ${{ parameters.configuration }}
    pool:
      vmImage: ${{ parameters.vmImage }}

    steps:
    - template: azure-pipelines.core.init-dotnet-tools.yml
      parameters:
        vmImage: vmImage

    - ${{ if parameters.dockerRegistryServiceConnection }}:
      - task: Docker@2
        inputs:
          command: login
          containerRegistry: ${{ parameters.dockerRegistryServiceConnection }}
        displayName: Init - Docker - Login

    - task: DownloadPipelineArtifact@0
      displayName: Restore - Artifacts
      inputs:
        artifactName: build-${{ parameters.configuration }}
        targetPath: $(Build.ArtifactStagingDirectory)

    - script: |
        dotnet cake deploy.cake --configuration=${{ parameters.configuration }} --target=publish --artifacts-directory=$(Build.ArtifactStagingDirectory) --package-registry=$(docker-registry-server)/
      displayName: Build - Publish

    - script: |
        dotnet cake deploy.cake --target=clean --configuration=${{ parameters.configuration }} --artifacts-directory=$(Build.ArtifactStagingDirectory) --package-registry=$(docker-registry-server)/
      displayName: Clean - Build
      condition: always()

    - ${{ if parameters.dockerRegistryServiceConnection }}:
      - task: Docker@2
        inputs:
          command: logout
          containerRegistry: ${{ parameters.dockerRegistryServiceConnection }}
        displayName: Clean - Docker - Logout
        condition: always()
