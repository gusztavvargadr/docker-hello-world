parameters:
  configurations: []
  dockerRegistryServiceConnection: ''

jobs:
- ${{ each configuration in parameters.configurations }}:
  - job: deploy_${{ configuration.os }}_${{ configuration.arch }}
    displayName: Deploy - ${{ configuration.os }} - ${{ configuration.arch }}
    pool:
      ${{ if eq(configuration.os, 'linux') }}:
        vmImage: ubuntu-16.04
      ${{ if eq(configuration.os, 'windows') }}:
        vmImage: windows-2019

    steps:
    - template: azure-pipelines.core.yml
      parameters:
        os: ${{ configuration.os }}

    - ${{ if parameters.dockerRegistryServiceConnection }}:
      - task: Docker@2
        inputs:
          command: login
          containerRegistry: ${{ parameters.dockerRegistryServiceConnection }}
        displayName: Init - Docker - Login

    - task: DownloadPipelineArtifact@0
      displayName: Restore - Artifacts
      inputs:
        artifactName: ${{ configuration.os }}-${{ configuration.arch }}-image
        targetPath: $(Build.ArtifactStagingDirectory)/${{ configuration.os }}-${{ configuration.arch }}

    - script: |
        dotnet cake deploy.cake --target=publish --configuration=${{ configuration.os }}-${{ configuration.arch }} --artifacts-directory=$(Build.ArtifactStagingDirectory) --package-registry=$(docker-registry-server)/
      displayName: Build - Publish

    - task: PublishPipelineArtifact@0
      displayName: Publish - Artifacts
      inputs:
        artifactName: ${{ configuration.os }}-${{ configuration.arch }}-registry-$(environment-name)
        targetPath: $(Build.ArtifactStagingDirectory)/${{ configuration.os }}-${{ configuration.arch }}/registry.tar.gz

    - script: |
        dotnet cake deploy.cake --target=clean --configuration=${{ configuration.os }}-${{ configuration.arch }} --artifacts-directory=$(Build.ArtifactStagingDirectory) --package-registry=$(docker-registry-server)/
      displayName: Clean - Build
      condition: 'False'

    - ${{ if parameters.dockerRegistryServiceConnection }}:
      - task: Docker@2
        inputs:
          command: logout
          containerRegistry: ${{ parameters.dockerRegistryServiceConnection }}
        displayName: Clean - Docker - Logout
        condition: always()

- job: deploy_manifest
  displayName: Deploy - manifest
  pool:
    vmImage: ubuntu-16.04
  dependsOn:
  - ${{ each configuration in parameters.configurations }}:
    - deploy_${{ configuration.os }}_${{ configuration.arch }}

  steps:
  - template: azure-pipelines.core.yml
    parameters:
      os: linux

  - ${{ if parameters.dockerRegistryServiceConnection }}:
    - task: Docker@2
      inputs:
        command: login
        containerRegistry: ${{ parameters.dockerRegistryServiceConnection }}
      displayName: Init - Docker - Login

  - ${{ each configuration in parameters.configurations }}:
    - task: DownloadPipelineArtifact@0
      displayName: Restore - Artifacts - ${{ configuration.os }}-${{ configuration.arch }}
      inputs:
        artifactName: ${{ configuration.os }}-${{ configuration.arch }}-registry-$(environment-name)
        targetPath: $(Build.ArtifactStagingDirectory)/${{ configuration.os }}-${{ configuration.arch }}

  - script: |
      dotnet cake deploy.cake --target=publish --configuration=manifest --artifacts-directory=$(Build.ArtifactStagingDirectory) --package-registry=$(docker-registry-server)/
    displayName: Build - Publish

  - ${{ if parameters.dockerRegistryServiceConnection }}:
    - task: Docker@2
      inputs:
        command: logout
        containerRegistry: ${{ parameters.dockerRegistryServiceConnection }}
      displayName: Clean - Docker - Logout
      condition: always()
