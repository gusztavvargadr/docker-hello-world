parameters:
  configurations: []
  dockerRegistryServiceConnection: ''

jobs:
- ${{ each configuration in parameters.configurations }}:
  - job: deploy_${{ configuration.os }}_${{ configuration.arch }}
    displayName: Deploy - ${{ configuration.os }} - ${{ configuration.arch }}
    pool:
      vmImage: ${{ configuration.vmImage }}

    steps:
    - template: azure-pipelines.core.yml
      parameters:
        os: ${{ configuration.os }}

    - ${{ if parameters.dockerRegistryServiceConnection }}:
      - task: Docker@2
        inputs:
          command: login
          containerRegistry: ${{ parameters.dockerRegistryServiceConnection }}
        displayName: Init - Docker - Login

    - task: DownloadPipelineArtifact@0
      displayName: Restore - Artifacts
      inputs:
        artifactName: build-${{ configuration.os }}-${{ configuration.arch }}
        targetPath: $(Build.ArtifactStagingDirectory)

    - script: |
        dotnet cake deploy.cake --configuration=${{ configuration.os }}-${{ configuration.arch }} --target=publish --artifacts-directory=$(Build.ArtifactStagingDirectory) --package-registry=$(docker-registry-server)/
      displayName: Build - Publish

    - script: |
        dotnet cake deploy.cake --target=clean --configuration=${{ configuration.os }}-${{ configuration.arch }} --artifacts-directory=$(Build.ArtifactStagingDirectory) --package-registry=$(docker-registry-server)/
      displayName: Clean - Build
      condition: always()

    - ${{ if parameters.dockerRegistryServiceConnection }}:
      - task: Docker@2
        inputs:
          command: logout
          containerRegistry: ${{ parameters.dockerRegistryServiceConnection }}
        displayName: Clean - Docker - Logout
        condition: always()
